name: build

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        version:
          - '25/alpine'
          - '25'
          - '26/alpine'
          - '26'
          - '27/alpine'
          - '27'
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare Docker build
        id: prepare
        run: |
          function version { echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; }

          BITCOIN_VERSION=${{matrix.version}}
          LATEST_BITCOIN_MAJOR_VERSION=$(find . -type d -maxdepth 1 -not -path '*/\.*' -not -path '*/deprecated' | sort -n | tail -n 1 | cut -c 3-)
          PLATFORMS="linux/amd64"
          PUSH=false
          REPO=bitcoin/bitcoin
          TAGS=()

          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
            PUSH=true

            if [[ ${BITCOIN_VERSION} == *"alpine"* ]]; then
              TAGS+=("$REPO:$TAG-alpine")
            else
              TAGS+=("$REPO:$TAG")
            fi

            if [[ $(version ${TAG}) -ge $(version "22.0") ]]; then
              TAG_MAJOR_MINOR=$(echo $TAG | cut -c -2)"
            else
              TAG_MAJOR_MINOR=$(echo $TAG | cut -c -4)"
            fi

            if [[ $(version ${TAG_MAJOR_MINOR}) -ne $(version ${BITCOIN_VERSION}) ]]; then
              echo "Skipping build of base image $BITCOIN_VERSION/ as ${TAG} is targeted at ${TAG_MAJOR_MINOR}/"
              exit 0
            fi
          else
            TAGS=("$REPO:${BITCOIN_VERSION/\//-}")

            if [[ $(version ${BITCOIN_VERSION}) -ge $(version ${LATEST_BITCOIN_MAJOR_VERSION}) ]]; then
              echo "Version $(version ${BITCOIN_VERSION}) is greater than or equal to $(version ${LATEST_BITCOIN_MAJOR_VERSION}), tagging as latest"

              if [[ ${BITCOIN_VERSION} != *"alpine"* ]]; then
                TAGS+=("$REPO:latest")
              else
                TAGS+=("$REPO:alpine")
              fi
            fi

            if [[ $GITHUB_REF == "refs/heads/master" ]]; then
              PUSH=true
            fi
          fi

          if [[ ${BITCOIN_VERSION} != *"alpine"* ]]; then
            PLATFORMS="linux/amd64,linux/arm64,linux/arm/v7"
          fi

          echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "docker_platforms=${PLATFORMS}" >> $GITHUB_OUTPUT
          echo "docker_username=will8clark" >> $GITHUB_OUTPUT
          echo "push=${PUSH}" >> $GITHUB_OUTPUT
          echo "tags=${TAGS[@]}" >> $GITHUB_OUTPUT
          echo "build=true" >> $GITHUB_OUTPUT

      - if: ${{ steps.prepare.outputs.build }} == 'true'
        name: Login into Docker Hub
        uses: docker/login-action@v3
        with:
          username: bitcoin
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - if: ${{ steps.prepare.outputs.build }} == 'true'
        name: Build Docker image
        run: |
          TAGS=(${{ steps.prepare.outputs.tags }})

          echo "Build date: ${{ steps.prepare.outputs.build_date }}"
          echo "Docker platform: ${{ steps.prepare.outputs.docker_platforms }}"
          echo "Push: ${{ steps.prepare.outputs.push }}"
          echo "Tags: ${{ steps.prepare.outputs.tags }}"

          echo docker buildx build --platform ${{ steps.prepare.outputs.docker_platforms }} \
            --output "type=image,push=${{steps.prepare.outputs.push}}" \
            --progress=plain \
            --build-arg "BUILD_DATE=${{ steps.prepare.outputs.build_date }}" \
            --build-arg "VCS_REF=${GITHUB_SHA::8}" \
            $(printf "%s" "${TAGS[@]/#/ --tag }" ) \
            ${{ matrix.version }}/

          docker buildx build --platform ${{ steps.prepare.outputs.docker_platforms }} \
            --output "type=image,push=${{steps.prepare.outputs.push}}" \
            --progress=plain \
            --build-arg "BUILD_DATE=${{ steps.prepare.outputs.build_date }}" \
            --build-arg "VCS_REF=${GITHUB_SHA::8}" \
            $(printf "%s" "${TAGS[@]/#/ --tag }" ) \
            ${{ matrix.version }}/
